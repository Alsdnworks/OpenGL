
포인터를사용할때
{
  int* a = new int;
  int* b = a;

  // ...
  //문제점1 이대로가면 a 메모리 블록 만큼의 memory leak 발생
  delete a;
  delete b; //문제점2 두 번 메모리를 해제하여 문제 발생
}

중괄호가끝날때 지역변수인 포인터는 자동해제된다
문제점1 해결
{
  std::unique_ptr<int> a = std::make_unique();
  int* b = a.get();

  // ...
}

고의적으로 소유권을 이전하러할때 안정상의 이유로 컴파일 에러를 발생시킨다.
{
  std::unique_ptr<int> a = std::make_unique();
  std::unique_ptr<int> b = a; // error 발생

  // ...
}

옮길때는 a를 해제하고 b로 이전시킨다.
unique_ptr<>를 사용하는 경우:
std::move() 함수를 사용해서 명시적으로 소유권 이전 가능.
대신 이전에 소유권을 가진 인스턴스는 nullptr를 갖게됨
{
  std::unique_ptr<int> a = std::make_unique();
  std::unique_ptr<int> b = std::move(a);

  // a는 nullptr가 되어 더이상 사용 불가능
}
